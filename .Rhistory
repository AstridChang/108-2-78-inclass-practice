`entranceYear?•Â≠∏major2Âπ¥Á?`= # entranceYear+2-1Â≠∏Âπ¥, major2
# entranceYear+1-1Â≠∏Âπ¥, major1
schoolYear <- entranceYear+1-1
pick_schoolYear <- courseStructure$Â≠∏Âπ¥==as.character(schoolYear)
pick_majorGrade <- str_detect(courseStructure$?â‰øÆÁ≥ªÁ?, paste0(major,1))
courseStructure$ÁßëÁõÆ?çÁ®±[pick_schoolYear & pick_majorGrade] %>%
unique() -> result1
# entranceYear+2-1Â≠∏Âπ¥, major2
schoolYear <- entranceYear+2-1
pick_schoolYear <- courseStructure$Â≠∏Âπ¥==as.character(schoolYear)
pick_majorGrade <- str_detect(courseStructure$?â‰øÆÁ≥ªÁ?, paste0(major,2))
courseStructure$ÁßëÁõÆ?çÁ®±[pick_schoolYear & pick_majorGrade] %>%
unique() -> result2
# entranceYear+3-1Â≠∏Âπ¥, major3
schoolYear <- entranceYear+3-1
pick_schoolYear <- courseStructure$Â≠∏Âπ¥==as.character(schoolYear)
pick_majorGrade <- str_detect(courseStructure$?â‰øÆÁ≥ªÁ?, paste0(major,3))
courseStructure$ÁßëÁõÆ?çÁ®±[pick_schoolYear & pick_majorGrade] %>%
unique() -> result3
# entranceYear+4-1Â≠∏Âπ¥, major4
schoolYear <- entranceYear+4-1
pick_schoolYear <- courseStructure$Â≠∏Âπ¥==as.character(schoolYear)
pick_majorGrade <- str_detect(courseStructure$?â‰øÆÁ≥ªÁ?, paste0(major,4))
courseStructure$ÁßëÁõÆ?çÁ®±[pick_schoolYear & pick_majorGrade] %>%
unique() -> result4
list(
`entranceYear?•Â≠∏major1Âπ¥Á?`=result1, # entranceYear+1-1Â≠∏Âπ¥, major1
`entranceYear?•Â≠∏major2Âπ¥Á?`=result2, # entranceYear+2-1Â≠∏Âπ¥, major2
`entranceYear?•Â≠∏major3Âπ¥Á?`=result3, # entranceYear+3-1Â≠∏Âπ¥, major3
`entranceYear?•Â≠∏major4Âπ¥Á?`=result4 # entranceYear+4-1Â≠∏Âπ¥, major4
) ->  coursesOffered
grades <- c(1,2,3,4)
# entranceYear+1-1Â≠∏Âπ¥, major1
unique(courseStructure$ÁßëÁõÆ?çÁ®±[
courseStructure$Â≠∏Âπ¥==as.character(entranceYear+grades[[1]]-1) &
str_detect(courseStructure$?â‰øÆÁ≥ªÁ?,
paste0(major,grades[[1]]))
]) -> result1
map(grades,
~unique(courseStructure$ÁßëÁõÆ?çÁ®±[
courseStructure$Â≠∏Âπ¥==as.character(entranceYear+.x-1) &
str_detect(courseStructure$?â‰øÆÁ≥ªÁ?,
paste0(major,.x))
])) -> coursesOffered
grades <- 1:4
grades %>%
map(
~(courseStructure$Â≠∏Âπ¥==(entranceYear+.x-1) &
str_detect(courseStructure$?â‰øÆÁ≥ªÁ?, paste0(major,.x)))
)  %>%
map(
~unique(courseStructure$ÁßëÁõÆ?çÁ®±[.x])
) -> coursesOffered
# coursesOffered
q()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
install.packages("lubid")
install.packages("jsonlite")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
summary(cars)
install.packages("SOAR")
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate); library(jsonlite)
knitr::opts_chunk$set(echo = TRUE)
# ‰∏≤Êé•ÂØ´Ê≥ï(II): internal dispatch
library(magrittr)
eggs <- rep("ÈõûËõãx1", 8)
eggs
library(stringr)
fryEgg <- function(egg){
str_replace(egg, "ÈõûËõã", "Ëç∑ÂåÖËõã")
}
fryEgg()
fryEgg
fryEgg(eggs[[1]])
eggs[[1]] %>% fryEgg(.)
eggs[[2]] %>% fryEgg(.)
eggs[[3]] %>% fryEgg(.)
map(eggs, ~fryEgg(.x)) -> friedEggs1
1 %>% {fryEgg(eggs[[.]])}
2 %>% {fryEgg(eggs[[.]])}
3 %>% {fryEgg(eggs[[.]])}
map(1:8, ~{fryEgg(eggs[[.]])}) -> friedEggs2
map(1:8, ~{fryEgg(eggs[[.]])}) -> friedEggs2
friedEggs2
grade <- c(45, 74, NA)
i<-3
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"Áº∫ËÄÉ"
}
grade <- c(45, 74, NA)
i<-3
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"Áº∫ËÄÉ"
}
grade <- c(45, 74, NA)
i<-2
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"Áº∫ËÄÉ"
}
grade <- c(45, 74, NA)
i<-1
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"Áº∫ËÄÉ"
}
grade <- c(45, 74, NA)
i<-1
i<-2
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"Áº∫ËÄÉ"
}
pass_or_fail <- function(grade_i){
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"Áº∫ËÄÉ"
}
}
pass_or_fail()
pass_or_fail
pass_or_fail(grade[[1]])
pass_or_fail(grade[[2]])
pass_or_fail(grade[[3]])
warning("‰∏çÊòØvectorised function")
pass_or_fail(grade)
rm(grade)
map_pass_fail(c(77,43,68,NA))
map_pass_fail(grade)
grade <- c(45, 74, NA)
i<-1 #ÂèØÊîπÊàê2 3 Ë©¶Ë©¶Áúã
grade_i <- grade[[i]]
if(!is.na(grade_i)){
if(grade_i >= 60){
"P"
} else if(grade_i < 60 ) {
"F"
}
} else {
"Áº∫ËÄÉ"
}
rm(grade)
map_pass_fail
map_pass_fail(c(77,43,68,NA))
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
entranceYear <- 100
major <- "Á∂ìÊøüÁ≥ª"
allGrades <- paste0(major, 1:4)
academicYears <- entranceYear+0:3
allGrades
academicYears
entranceYear <- 100
major <- "Á∂ìÊøüÁ≥ª"
allGrades <- paste0(major, 1:4)
academicYears <- entranceYear+0:3
# 100Â≠∏Âπ¥ 1Âπ¥Á¥ö
acadYear_i <- academicYears[[1]]
grade_i <- allGrades[[1]]
pick <-
(courseStructure$Â≠∏Âπ¥==acadYear_i
&
str_detect(courseStructure$Êáâ‰øÆÁ≥ªÁ¥ö, grade_i))
unique(courseStructure$ÁßëÁõÆÂêçÁ®±[pick])
# 101Â≠∏Âπ¥ 2Âπ¥Á¥ö
acadYear_i <- academicYears[[2]]
grade_i <- allGrades[[2]]
pick <-
(courseStructure$Â≠∏Âπ¥==acadYear_i
&
str_detect(courseStructure$Êáâ‰øÆÁ≥ªÁ¥ö, grade_i))
unique(courseStructure$ÁßëÁõÆÂêçÁ®±[pick])
# 102Â≠∏Âπ¥ 3Âπ¥Á¥ö
acadYear_i <- academicYears[[3]]
grade_i <- allGrades[[3]]
pick <-
(courseStructure$Â≠∏Âπ¥==acadYear_i
&
str_detect(courseStructure$Êáâ‰øÆÁ≥ªÁ¥ö, grade_i))
unique(courseStructure$ÁßëÁõÆÂêçÁ®±[pick])
# 103Â≠∏Âπ¥ 4Âπ¥Á¥ö
acadYear_i <- academicYears[[4]]
grade_i <- allGrades[[4]]
pick <-
(courseStructure$Â≠∏Âπ¥==acadYear_i
&
str_detect(courseStructure$Êáâ‰øÆÁ≥ªÁ¥ö, grade_i))
unique(courseStructure$ÁßëÁõÆÂêçÁ®±[pick])
# 100Â≠∏Âπ¥1Âπ¥Á¥ö-103Â≠∏Âπ¥4Âπ¥Á¥öÔºåÊúâÂì™ÂπæË°åÊòØ‰∏ÄÊ®°‰∏ÄÊ®£ÁöÑÔºü
pick <-
(courseStructure$Â≠∏Âπ¥==acadYear_i
&
str_detect(courseStructure$Êáâ‰øÆÁ≥ªÁ¥ö, grade_i))
unique(courseStructure$ÁßëÁõÆÂêçÁ®±[pick])
# Â∞á(A)(B)ÂΩ¢ÊàêÂáΩÊï∏
get_courses <- function(acadYear_i, grade_i, courseStructure){
pick <-
(courseStructure$Â≠∏Âπ¥==acadYear_i
&
str_detect(courseStructure$Êáâ‰øÆÁ≥ªÁ¥ö, grade_i))
return(
unique(courseStructure$ÁßëÁõÆÂêçÁ®±[pick])
)
}
# ÈáçÂØ´100Â≠∏Âπ¥1Âπ¥Á¥ö-103Â≠∏Âπ¥4Âπ¥Á¥ö
# 100Â≠∏Âπ¥ 1Âπ¥Á¥ö
acadYear_i <- academicYears[[1]]
grade_i <- allGrades[[1]]
get_courses(acadYear_i, grade_i, courseStructure)
# 101Â≠∏Âπ¥ 2Âπ¥Á¥ö
acadYear_i <- academicYears[[2]]
grade_i <- allGrades[[2]]
get_courses(acadYear_i, grade_i, courseStructure)
# 102Â≠∏Âπ¥ 3Âπ¥Á¥ö
acadYear_i <- academicYears[[3]]
grade_i <- allGrades[[3]]
get_courses(acadYear_i, grade_i, courseStructure)
# 103Â≠∏Âπ¥ 4Âπ¥Á¥ö
acadYear_i <- academicYears[[4]]
grade_i <- allGrades[[4]]
get_courses(acadYear_i, grade_i, courseStructure)
# ÊøÉÁ∏Æ
# 100Â≠∏Âπ¥ 1Âπ¥Á¥ö
get_courses(academicYears[[1]], allGrades[[1]], courseStructure)
# 101Â≠∏Âπ¥ 2Âπ¥Á¥ö
get_courses(academicYears[[2]], allGrades[[2]], courseStructure)
# 102Â≠∏Âπ¥ 3Âπ¥Á¥ö
get_courses(academicYears[[3]], allGrades[[3]], courseStructure)
# 103Â≠∏Âπ¥ 4Âπ¥Á¥ö
get_courses(academicYears[[4]], allGrades[[4]], courseStructure)
# ‰ΩøÁî®pipe
1 %>%
{get_courses(academicYears[[.]], allGrades[[.]], courseStructure)}
2 %>%
{get_courses(academicYears[[.]], allGrades[[.]], courseStructure)}
3 %>%
{get_courses(academicYears[[.]], allGrades[[.]], courseStructure)}
4 %>%
{get_courses(academicYears[[.]], allGrades[[.]], courseStructure)}
# ‰ΩøÁî®map
1:4 %>%
map(~{get_courses(academicYears[[.]], allGrades[[.]], courseStructure)})
1:4 %>%
map(~{
get_courses(academicYears[[.]],
allGrades[[.]],
courseStructure)})
output <- vector("{type}", length={len})
output <- vector("{type}", length={len})
output <- vector("{type}", length={len})
### ÂâçÁΩÆ‰ΩúÊ•≠
entranceYear <- 100
major <- "Á∂ìÊøüÁ≥ª"
allGrades <- paste0(major, 1:4)
academicYears <- entranceYear+0:3
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
get_courses <- function(acadYear_i, grade_i, courseStructure){
pick <-
(courseStructure$Â≠∏Âπ¥==acadYear_i
&
str_detect(courseStructure$Êáâ‰øÆÁ≥ªÁ¥ö, grade_i))
return(
unique(courseStructure$ÁßëÁõÆÂêçÁ®±[pick])
)
}
1 %>% get_courses(academicYears[[.]]),
# internal dispatching
1 %>% {get_courses(academicYears[[.]]),
# internal dispatching
get_courses(academicYears[[1]],
allGrades[[1]],
courseStructure)
get_courses(academicYears[[2]],
allGrades[[2]],
courseStructure)
get_courses(academicYears[[3]],
allGrades[[3]],
courseStructure)
get_courses(academicYears[[4]],
allGrades[[4]],
courseStructure)
1 %>% get_courses(academicYears[[.]],
allGrades[[.]],
courseStructure)
# ÂâçÁΩÆ‰ΩúÊ•≠ÔºåÊé•for iteration
output <- vector("list", length=4)
for(.x in 1:4){
get_courses(academicYears[[.x]],
allGrades[[.x]],
courseStructure) -> output[[.x]]
}
eggs <- rep("ÈõûËõãx1",10)
ham <- rep("ÁÅ´ËÖøx1", 10)
toast <- rep("ÂúüÂè∏2Áâá",10)
toast_withEggHam <- function(toast=NULL, egg=NULL, ham=NULL){
if(is.null(toast) || !str_detect(toast, "ÂúüÂè∏")){stop("Â∞ë‰∫ÜÂúüÂè∏")}
if(is.null(egg) || !str_detect(egg, "Ëõã")){stop("Â∞ë‰∫ÜËõã")}
if(is.null(ham) || !str_detect(ham, "ÁÅ´ËÖø")){stop("Â∞ë‰∫ÜÁÅ´ËÖø")}
"ÁÅ´ËÖøËõã‰∏âÊòéÊ≤ª"
}
map(1:10,
~toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]))
eggs <- rep("ÈõûËõãx1",10)
ham <- rep("ÁÅ´ËÖøx1", 10)
toast <- rep("ÂúüÂè∏2Áâá",10)
toast_withEggHam <- function(toast=NULL, egg=NULL, ham=NULL){
if(is.null(toast) || !str_detect(toast, "ÂúüÂè∏")){stop("Â∞ë‰∫ÜÂúüÂè∏")}
if(is.null(egg) || !str_detect(egg, "Ëõã")){stop("Â∞ë‰∫ÜËõã")}
if(is.null(ham) || !str_detect(ham, "ÁÅ´ËÖø")){stop("Â∞ë‰∫ÜÁÅ´ËÖø")}
"ÁÅ´ËÖøËõã‰∏âÊòéÊ≤ª"
}
output <- vector("character", 10)
for(.x in 1:10){
toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]) -> output[[.x]]
}
output <- vector("character", 10)
for(.x in 1:10){
toast_withEggHam(toast=toast[[.x]], egg=eggs[[.x]], ham=ham[[.x]]) -> output[[.x]] #Â≠òÂõû
}
a <- sample(1:100, 10, replace=T)
print(a)
```{r}
sum <- 0
sum <- sum + a[[1]]
sum <- sum + a[[2]]
sum <- sum + a[[3]]
sum
sum <- 0
for(.x in 1:10){
sum <- sum+a[[.x]]
}
print(sum)
sum
output <- c()
output <- c()
for(.x in 1:10){
new <- sample(0:100,1)
if(new %% 3==0){
output <- c(output, new)
}
}
print(output)
nameVector[[1]] <-
collectionHWs[[1]][[1]]
list(
list("student A", c(2,3,4,5)),
list("student B", NA), # Ê≤í‰∫§‰ΩúÊ•≠
list("student C", factor(c(2,3,4,5))),
list("student D", factor(c(2,3,5)))
) -> collectionHWs
correctAns <- factor(c(2,3,4,5))
output <- vector("integer",length(collectionHWs))
nameVector <- vector("character", length(collectionHWs))
for(.x in seq_along(collectionHWs)){
nameVector[[.x]] <- collectionHWs[[.x]][[1]]
studentAns <- collectionHWs[[.x]][[2]]
if(is.na(studentAns)){
output[[.x]] <- 0
next
}
# Á¨¨‰∏ÄÂÄãÂ≠∏Áîü
nameVector[[1]] <-
collectionHWs[[1]][[1]]
studentAns <- collectionHWs[[1]][[2]]
# ÊîπÈ°åÈÉ®‰ªΩ
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}
}
names(output) <- nameVector
print(output)
sum <- 0
for(i in 1:10){
newToss <- sample(c("Ê≠£","Âèç"), 1, replace=T)
if(newToss == "Ê≠£"){
sum <- sum+1
}
print(glue::glue("Â∑≤Êì≤{i}Ê¨°ÂæóÂà∞{sum}Ê¨°Ê≠£Èù¢"))
}
list(
list("student A", c(2,3,4,5)),
list("student B", NA), # Ê≤í‰∫§‰ΩúÊ•≠
list("student C", factor(c(2,3,4,5))),
list("student D", factor(c(2,3,5)))
) -> collectionHWs
correctAns <- factor(c(2,3,4,5))
output <- vector("integer",length(collectionHWs))
nameVector <- vector("character", length(collectionHWs))
for(.x in seq_along(collectionHWs)){
nameVector[[.x]] <- collectionHWs[[.x]][[1]]
studentAns <- collectionHWs[[.x]][[2]]
if(is.na(studentAns)){
output[[.x]] <- 0
next
}
# Á¨¨‰∏ÄÂÄãÂ≠∏Áîü
nameVector[[1]] <-
collectionHWs[[1]][[1]]
studentAns <- collectionHWs[[1]][[2]]
# ÊîπÈ°åÈÉ®‰ªΩ
if(identical(studentAns, correctAns)){
output[[.x]] <- 10
} else if (class(studentAns)!=class(correctAns) && identical(as.character(studentAns),as.character(correctAns))) {
output[[.x]] <- 5
} else {
output[[.x]] <- 0
}
}
names(output) <- nameVector
print(output)
seq_along(collectionHWs)
sum <- 0
sum <- 0 # ÂæóÂà∞ÂπæÂÄãÊ≠£Èù¢
count <- 0 #Ë®àÁÆóÊì≤‰∫ÜÂπæÊ¨°
# first toss
count <- count+1 # Ë®àÊï∏Âô®+1
newToss <- sample(c("Ê≠£","Âèç")), 1 ,replace = T)
sum <- 0 # ÂæóÂà∞ÂπæÂÄãÊ≠£Èù¢
count <- 0 #Ë®àÁÆóÊì≤‰∫ÜÂπæÊ¨°
# first toss
count <- count+1 # Ë®àÊï∏Âô®+1
newToss <- sample(c("Ê≠£","Âèç")), 1, replace = T)
sum <- 0 # ÂæóÂà∞ÂπæÂÄãÊ≠£Èù¢
count <- 0 #Ë®àÁÆóÊì≤‰∫ÜÂπæÊ¨°
# first toss
count <- count+1 # Ë®àÊï∏Âô®+1
newToss <- sample(c("Ê≠£","Âèç")),1, replace = T)
sum <- 0
count <- 0 # Ë®àÊï∏Âô®
while(sum<5){
count <- count+1 # Ë®àÊï∏Âô®+1
newToss <- sample(c("Ê≠£","Âèç"), 1, replace=T)
if(newToss == "Ê≠£"){
sum <- sum+1
}
print(glue::glue("Â∑≤Êì≤{count}Ê¨°ÂæóÂà∞{sum}Ê¨°Ê≠£Èù¢"))
}
while(continueCondition){
body
}
count <- 0 # Ë®àÊï∏Âô®ÈñãÂßãÂÄº
max_count <- 500 # Ë®àÊï∏‰∏äÈôê
while(continueCondition && count <= max_count){ # Â¢ûÂä†Ë®àÊï∏‰∏äÈôêÊ¢ù‰ª∂
count <- count+1 # Ë®àÊï∏Âô®Âä†1
body
}
set.seed(1000) # ÊéßÂà∂sampleÊäΩÂá∫ÁöÑÊï∏Â≠ósequenceÂõ∫ÂÆöÔºåÈÄöÂ∏∏ÈÄ≤Ë°åÊñπÊ≥ïÊØîÂ∞çÁî®
output <- c()
for(.x in 1:10){
new <- sample(0:100,1)
if(new %% 3==0){
output <- c(output, new)
}
}
print(output)
set.seed(1000) # ÊéßÂà∂sampleÊäΩÂá∫ÁöÑÊï∏Â≠ósequenceÂõ∫ÂÆöÔºåÈÄöÂ∏∏ÈÄ≤Ë°åÊñπÊ≥ïÊØîÂ∞çÁî®
count <- 0 # Ë®àÊï∏Âô®Ëµ∑ÂßãÂÄº
output <- c()
while(count <= 10){ # Ë®àÊï∏‰∏äÈôêÊ¢ù‰ª∂
count <- count+1 # Ë®àÊï∏Âô®+1
new <- sample(0:100,1)
if(new %% 3==0){
output <- c(output, new)
}
}
print(output)
