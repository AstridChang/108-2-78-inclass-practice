print(file.path(getwd(),"report.txt"))
print(file.path(getwd(),"report.txt"))
print(file.path(getwd(),"report.txt"))
print(file.path(getwd(),"report.txt"))
'https://forms.gle/vPoQ1MC4cNEJuNqM8'
if(!require("readr")){
install.packages("readr")
}
sink("report.txt")
Sys.getenv()
Sys.getlocale()
readr::locale()
sessionInfo()
sink()
print(file.path(getwd(),"report.txt"))
knitr::opts_chunk$set(echo = TRUE)
if(!require("readr")){
install.packages("readr")
}
sink("report.txt")
Sys.getenv()
Sys.getlocale()
readr::locale()
sessionInfo()
sink()
print(file.path(getwd(),"report.txt"))
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite)
fromJSON("https://www.dropbox.com/s/uday7x99k9q9sxm/course.json?dl=1", simplifyDataFrame = T) -> course
pi <- c(3,1,4,1,5,9,2,6,5,3,5)
print(pi)
gift <- pi
# gift
gift <- pi
gift[[8]]
# gift
gift <- pi
gift[[8]]
gift
gift <- pi
gift[[8]]
gift <- pi
gift[[8]]
gift
gift <- pi
gift$pi[[8]]
knitr::opts_chunk$set(echo = F, eval=F)
library(lubridate); library(jsonlite); library(readr)
taiwan_time <- "2019-04-12 12:55:30"
oslo_time <- "18.11.2018 15:33:02"
knitr::opts_chunk$set(echo = F, eval=F)
library(lubridate); library(jsonlite); library(readr)
taiwan_time <- "西元2019年4月12日 12點55分30秒"
oslo_time <- "18.11.2018 15:33:02"
storage_fiveReceipts <- as.integer(fiveReceipts)
levels_fiveReceipts <- levels(fiveReceipts)
source("https://www.dropbox.com/s/bvs0m4oxw7yaqxw/108-2-hw1-3.R?dl=1")
fiveReceipts <- .randomReceipts(n=5)
levels_fiveReceipts <- levels(fiveReceipts)
levels_fiveReceipts
storage_fiveReceipts <- as.integer(fiveReceipts)
storage_fiveReceipts
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
back_regex <- function(rx)str_view_all(look("(?<=twoNames")`後面鄰居不能有弟`")
back_regex <- function(rx)str_view_all(look("(?<=twoNames"`後面鄰居不能有弟`")
back_regex <- function(rx)str_view_all(look("(?<=twoNames"),"後面鄰居不能有弟")
# back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
back_regex <- function(rx)str_view_all(look("(?<=twoNames"),"後面鄰居不能有弟")
# back_regex
View(back_regex)
back_regex <- function(rx)str_view_all(look("(?<=twoNames"),"`後面鄰居不能有弟`")
# back_regex
View(back_regex)
back_regex <- function(rx)str_view_all(look("(?<=twoNames"),"`後面鄰居不能有弟`")
# back_regex
View(back_regex)
pattern <- paste0("段(兄|兄弟)",back_regex)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- function(rx)str_view_all(look("(?<=twoNames")`後面鄰居不能有弟`)
back_regex <- function(rx)str_view_all(look("(?<=twoNames)`後面鄰居不能有弟`")
# back_regex
back_regex <- function(rx)str_view_all(look("(?<=twoNames)後面鄰居不能有弟")
# back_regex
back_regex <- function(rx)str_view_all(look("(?<=twoNames)`後面鄰居不能有弟`",rx)
# back_regex
back_regex <- function(rx)str_view_all(look("(?<=twoNames)後面鄰居不能有弟",rx)
# back_regex
back_regex <- function(rx)str_view_all("(?<=twoNames)後面鄰居不能有弟",rx)
# back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
pattern <- paste0("段(兄|兄弟)",back_regex)
back_regex <- function(rx)str_view_all("(?<=twoNames)後面鄰居不能有弟",rx)
# back_regex
View(back_regex)
back_regex <- function(rx)str_view_all("(?<=twoNames)`後面鄰居不能有弟`",rx)
# back_regex
back_regex <- function(rx)str_view_all("(?<=twoNames)`後面鄰居不能有弟`",rx)
View(back_regex)
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
back_regex <- function(rx)str_view_all("(?<=twoNames)`後面鄰居不能有弟`",rx)
# back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
knitr::opts_chunk$set(echo = TRUE)
Sys.getlocale("LC_TIME")
lubridate::ymd(
c("民國108年12月5日","民國98年10月5日")
)
Sys.getlocale("LC_TIME")
lubridate::ymd(
c("民國108年12月5日","民國98年10月5日")
)
Sys.getlocale("LC_TIME")
lubridate::ymd(
c("民國108年12月5日","民國98年10月5日")
)
pattern <- paste0("段(兄|兄弟)",back_regex)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
View(semiGodsSemiDevils)
View(semiGodsSemiDevils)
View(semiGodsSemiDevils[[5]][[1]])
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr); library(purrr); library(magrittr)
source("https://www.dropbox.com/s/aow5y2772r8ratb/regexPatternCheck.R?dl=1", encoding = "UTF-8")
jsonlite::fromJSON("https://www.dropbox.com/s/8wgdef4v44k1w0g/tpe_highSchools.json?dl=1") -> tpe_highSchools
tpe_highSchools <- factor(tpe_highSchools)
levels(tpe_highSchools)
tpe_highSchools <- factor(
tpe_highSchools, levels=c("臺北市立第一女中","台北市立第一女子高級中學","中山女中","中山女高", "台北市立中山女中", "臺北市立中山女子高級中學","國立政大附中", "國立政治大學附屬高級中學")
)
# tpe_highSchools
tpe_highSchools <-
factor(tpe_highSchools,
levels=c(levels(tpe_highSchools),"北一女")
)
((length(tpe_highSchools)+1):(length(tpe_highSchools)+10)) -> loc_append
tpe_highSchools[loc_append] <- "北一女"
# tpe_highSchools
regex_hs1st <- "[臺台]?北市?立?第?一女子?高?級?中?學?"
# regex_hs1st
check_regexRestriction("臺台北市立第一女子高級中學",regex_hs1st)
currentLevels <- levels(tpe_highSchools)
str_replace(currentLevels,regex_hs1st,"北一女") -> levels(tpe_highSchools)
levels(tpe_highSchools)
regex_hsTitle <-
"[高級中學]+$"
# regex_hsTitle
check_regexRestriction("高級中學",regex_hsTitle)
currentLevels <- levels(tpe_highSchools)
str_remove(
currentLevels,regex_hsTitle
) -> levels(tpe_highSchools)
levels(tpe_highSchools)
data228 <- readr::read_csv("https://www.dropbox.com/s/64yf3uq8wtvb5q7/%E4%BA%8C%E4%BA%8C%E5%85%AB%E4%BA%8B%E4%BB%B6%E4%BA%BA%E5%90%8D%E7%B4%A2%E5%BC%95.csv?dl=1")
data228$檔號 %>%
str_split("/") -> split_docCode
map(split_docCode, ~.x[[1]]) %>%
unlist() %>%
factor() -> data228$全宗名編號
map(split_docCode, ~.x[[2]]) %>%
unlist() %>%
as.integer()-> data228$年
# data228[c("全宗名編號","年")]
map(split_docCode, ~.x[[1]]) %>%
unlist() %>%
factor() -> data228$全宗名編號
map(split_docCode, ~.x[[2]]) %>%
unlist() %>%
as.integer()-> data228$年
data228[c("全宗名編號","年")]
victims %>%
map(~data228$檔號[(data228$個人名稱==.x & !is.na(data228$個人名稱))]) ->
list_docByVictim
(data228$附註=="表冊名稱:臺灣省二二八事變正法及死亡人犯名冊") ->
pick_document
data228$檔號[pick_document] %>%
unique() ->
doc_number
(data228$檔號==doc_number) ->
pick_document
data228$個人名稱[pick_document] %>%
unique() -> victims
# victims
victims %>%
map(~data228$檔號[(data228$個人名稱==.x & !is.na(data228$個人名稱))]) ->
list_docByVictim
list_docByVictim %>%
map(
~ length(unique(.x))
) %>%
unlist() -> documentCount_eachVictim
names(documentCount_eachVictim) <- victims
sort(documentCount_eachVictim, decreasing = T) -> documentCount_eachVictim
# documentCount_eachVictim
documentCount_eachVictim
courseStructure$應修系級 %>%
str_extract_all(
"[^、]+系[司法學財經組]*[1-9]"
) %>%
unlist() %>%
unique() -> majorGradeCombos
jsonlite::fromJSON("https://www.dropbox.com/s/7myzzdnoor21hye/courseStructure2.json?dl=1") -> courseStructure
source("https://www.dropbox.com/s/pc8qg2phs3ypcr8/midterm108_2.R?dl=1", encoding="UTF-8")
courseStructure$應修系級 %>%
str_extract_all(
"[^、]+系[司法學財經組]*[1-9]"
) %>%
unlist() %>%
unique() -> majorGradeCombos
majorGradeCombos
(courseStructure$學年 == "103" &
str_detect(courseStructure$應修系級, "經濟系3")
) -> pick_courses
courseStructure$科目名稱[pick_courses] %>%
unique() -> econ101junior
# econ101junior
(courseStructure$學年 == "103" &
str_detect(courseStructure$應修系級, "經濟系3")
) -> pick_courses
courseStructure$科目名稱[pick_courses] %>%
unique() -> econ101junior
econ101junior
grades <- 1:4
grades %>%
map(
~(courseStructure$學年==(entranceYear+.x-1) &
str_detect(courseStructure$應修系級, paste0(major,.x)))
)  %>%
map(
~unique(courseStructure$科目名稱[.x])
) -> coursesOffered
# coursesOffered
grades <- 1:4
grades %>%
map(
~(courseStructure$學年==(entranceYear+.x-1) &
str_detect(courseStructure$應修系級, paste0(major,.x)))
)  %>%
map(
~unique(courseStructure$科目名稱[.x])
) -> coursesOffered
coursesOffered
